import{_ as i,c as a,a as n,o as l}from"./app-CO77B8re.js";const e={};function t(p,s){return l(),a("div",null,s[0]||(s[0]=[n(`<h3 id="dockerfile简介" tabindex="-1"><a class="header-anchor" href="#dockerfile简介"><span>DockerFile简介</span></a></h3><p>Dockerfile是用来构建Docker镜像的文本文件，是由一条条构建镜像所需的指令和参数构成的脚本。</p><p>官方网站：https://docs.docker.com/engine/reference/builder/</p><p>构建步骤：</p><ol><li>编写Dockerfile文件</li><li>build命令构建镜像</li><li>docker run依镜像运行容器实例</li></ol><p>DockerFile使用说明：</p><ul><li>每条保留字指令都必须为大写字母且后面要跟随至少一个参数</li><li>指令按照从上到下，顺序执行</li><li>#表示注释</li><li>每条指令都会创建一个新的镜像层并对镜像进行提交</li></ul><p>Docker执行Dockerfile的大致流程：</p><ol><li>docker从基础镜像运行一个容器</li><li>执行一条指令并对容器作出修改</li><li>执行类似docker commit的操作提交一个新的镜像层</li><li>docker再基于刚提交的镜像运行一个新容器</li><li>执行dockerfile中的下一条指令直到所有指令都执行完成</li></ol><h3 id="dockerfile中的保留字" tabindex="-1"><a class="header-anchor" href="#dockerfile中的保留字"><span>DockerFile中的保留字</span></a></h3><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 基础镜像，当前新镜像是基于哪个镜像的，指定一个已经存在的镜像作为模板，第一条必须是from</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># FROM hub.c.163.com/library/tomcat</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">FROM</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 镜像维护者的姓名和邮箱地址(非必须)</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># MAINTAINER yyj yyj@163.com</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">MAINTAINER</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 容器构建时需要运行的命令</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># shell格式：RUN &lt;命令行命令&gt; 等同于在终端操作的shell命令</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># RUN yum -y install vim</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># exec格式：RUN [&quot;可执行文件&quot; , &quot;参数1&quot;, &quot;参数2&quot;]</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># RUN [&quot;./test.php&quot;, &quot;dev&quot;, &quot;offline&quot;]  # 等价于 RUN ./test.php dev offline</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 执行时机：在docker build时运行</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">RUN</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 当前容器对外暴露出的端口</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># EXPOSE 3306 33060</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">EXPOSE</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 指定在创建容器后， 终端默认登录进来的工作目录</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># ENV CATALINA_HOME /usr/local/tomcat</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># WORKDIR $CATALINA_HOME</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">WORKDIR</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 指定该镜像以什么样的用户去执行，若不指定，默认是root。（一般不修改该配置）</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># USER &lt;user&gt;[:&lt;group&gt;]</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">USER</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 用来在构建镜像过程中设置环境变量,这个环境变量可以在后续的任何RUN指令或其他指令中使用</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># ENV MY_PATH /usr/mytest</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># WORKDIR $MY_PATH</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ENV</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 容器数据卷，用于数据保存和持久化工作。类似于 docker run 的-v参数</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># VOLUME /var/lib/mysql</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">VOLUME</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 将宿主机目录下（或远程文件）的文件拷贝进镜像，且会自动处理URL和解压tar压缩包。</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ADD</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 类似ADD，拷贝文件和目录到镜像中,将从构建上下文目录中&lt;源路径&gt;的文件目录复制到新的一层镜像内的&lt;目标路径&gt;位置。</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">COPY</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> src</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> dest</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">COPY</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">src</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">dest</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">]</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># &lt;src源路径&gt;：源文件或者源目录</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># &lt;dest目标路径&gt;：容器内的指定路径，该路径不用事先建好。如果不存在会自动创建</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 指定容器启动后要干的事情</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># shell格式:CMD &lt;命令&gt; CMD echo &quot;hello world&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># exec格式:CMD [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot; ...] CMD [&quot;catalina.sh&quot;, &quot;run&quot;]</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 参数列表格式:CMD [&quot;参数1&quot;, &quot;参数2&quot; ....]，与ENTRYPOINT指令配合使用</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 说明：Dockerfile中如果出现多个CMD指令，只有最后一个生效。CMD会被docker run之后的参数替换</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># docker run -it -p 8080:8080 tomcat</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 因为tomcat的Dockerfile中指定了 CMD [&quot;catalina.sh&quot;, &quot;run&quot;],所以直接docker run 时，容器启动后会自动执行 catalina.sh run</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># docker run -it -p 8080:8080 tomcat /bin/bash</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 指定容器启动后执行 /bin/bash,此时指定的/bin/bash会覆盖掉Dockerfile中指定的CMD[&quot;catalina.sh&quot;, &quot;run&quot;]，tomcat容器不会正常运行</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># CMD是在docker run时运行，而 RUN是在docker build时运行</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">CMD</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 用来指定一个容器启动时要运行的命令</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 说明：类似于CMD命令，但是ENTRYPOINT不会被docker run后面的命令覆盖，这些命令参数会被当做参数送给ENTRYPOINT指令指定的程序，ENTRYPOINT可以和CMD一起用，一般是可变参数才会使用CMD，这里的CMD等于是在给ENTRYPOINT传参，当指定了ENTRYPOINT后，CMD的含义就发生了变化，不再是直接运行期命令，而是将CMD的内容作为参数传递给ENTRYPOINT指令，它们两个组合会变成 &lt;ENTRYPOINT&gt; &quot;&lt;CMD&gt;&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 例如：</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">FROM</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> nginx</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ENTRYPOINT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">nginx</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">-c</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">]</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  # 定参</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">CMD</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/etc/nginx/nginx.conf</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">] </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 变参</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ENTRYPOINT</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># docker run nginx test：容器启动后，会执行 nginx -c /etc/nginx/nginx.conf</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># docker run nginx:test /app/nginx/new.conf：容器启动后，会执行 nginx -c /app/nginx/new.conf</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dockerfile构建镜像" tabindex="-1"><a class="header-anchor" href="#dockerfile构建镜像"><span>Dockerfile构建镜像</span></a></h3><p>使用Dockerfile构建镜像并安装VIM、网络工具、jdk8</p><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">FROM</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> centos</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">MAINTAINER</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> yyj</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">yyj@163.co</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">m</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ENV</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> MYPATH</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /usr/local</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">WORKDIR</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> $MYPATH</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#安装vim编辑器</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">RUN</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> yum</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -y</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> install</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> vim</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#安装ifconfig命令查看网络IP</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">RUN</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> yum</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -y</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> install</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> net-tools</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#安装java8及lib库</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">RUN</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> yum</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -y</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> install</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> glibc.i686</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">RUN</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> mkdir</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /usr/local/java</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#ADD 是相对路径jar,把jdk-8u171-linux-x64.tar.gz添加到容器中,安装包必须要和Dockerfile文件在同一位置</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ADD</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> jdk-8u171-linux-x64.tar.gz</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /usr/local/java/</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#配置java环境变量</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ENV</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> JAVA_HOME</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /usr/local/java/jdk1.8.0_171</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ENV</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> JRE_HOME</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> $JAVA_HOME</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/jre</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ENV</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> CLASSPATH</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> $JAVA_HOME</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/lib/dt.jar:</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">$JAVA_HOME</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/lib/tools.jar:</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">$JRE_HOME</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/lib:</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">$CLASSPATH</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ENV</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> PATH</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> $JAVA_HOME</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/bin:</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">$PATH</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">EXPOSE</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 80</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">CMD</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> echo</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> $MYPATH</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">CMD</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> echo</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">success!</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">CMD</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /bin/bash</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构建镜像</p><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> build</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -t</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> centos_java8:1.5</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> .</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>查看镜像是否构建完成，并启动容器</p><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -it</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> centos_java8:1.5</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /bin/bash</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="虚悬镜像" tabindex="-1"><a class="header-anchor" href="#虚悬镜像"><span>虚悬镜像</span></a></h3><p>仓库名、标签都是&lt;none&gt;的镜像，俗称dangling image</p><p>手动构建虚悬镜像</p><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 构建时候没有镜像名、tag</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> build</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> .</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>虚悬镜像一般是因为一些错误而出现的，没有存在价值，可以删除：</p><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 删除所有的虚悬镜像</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> image</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> prune</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,24)]))}const k=i(e,[["render",t],["__file","index.html.vue"]]),d=JSON.parse(`{"path":"/devops/docker/dockerfile/","title":"DockerFile使用","lang":"zh-CN","frontmatter":{"title":"DockerFile使用","createTime":"2025/03/28 07:13:58","permalink":"/devops/docker/dockerfile/","head":[["script",{"id":"check-dark-mode"},";(function () {const um= localStorage.getItem('vuepress-theme-appearance') || 'auto';const sm = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;if (um === 'dark' || (um !== 'light' && sm)) {document.documentElement.classList.add('dark');}})();"],["script",{"id":"check-mac-os"},"document.documentElement.classList.toggle('mac', /Mac|iPhone|iPod|iPad/i.test(navigator.platform))"]]},"headers":[{"level":3,"title":"DockerFile简介","slug":"dockerfile简介","link":"#dockerfile简介","children":[]},{"level":3,"title":"DockerFile中的保留字","slug":"dockerfile中的保留字","link":"#dockerfile中的保留字","children":[]},{"level":3,"title":"Dockerfile构建镜像","slug":"dockerfile构建镜像","link":"#dockerfile构建镜像","children":[]},{"level":3,"title":"虚悬镜像","slug":"虚悬镜像","link":"#虚悬镜像","children":[]}],"readingTime":{"minutes":4.45,"words":1334},"git":{"createdTime":1743342800000,"updatedTime":1743342800000,"contributors":[{"name":"yongjun","email":"1640808365@qq.com","commits":1}]},"filePathRelative":"notes/devops/docker/DockerFile使用.md"}`);export{k as comp,d as data};
