import{_ as i,c as e,a,o as n}from"./app-CO77B8re.js";const t="/yw-docs/assets/docker-network-01-CPlebkIa.png",l="/yw-docs/assets/docker-network-02-DHunTZYo.png",d="/yw-docs/assets/docker-network-03-pAP4p-so.png",h="/yw-docs/assets/docker-network-04-Bgkf26nJ.png",k={};function r(p,s){return n(),e("div",null,s[0]||(s[0]=[a(`<h3 id="docker网络介绍" tabindex="-1"><a class="header-anchor" href="#docker网络介绍"><span>Docker网络介绍：</span></a></h3><p>宿主机默认网卡信息：</p><p>ens33：本机网卡</p><p>lo：本机回环网卡</p><p>virbr0：CentOS安装时如果选择的有相关虚拟化服务，就会多一个以网桥连接的私网地址的<code>virbr0</code>网卡，作用是为连接虚拟网卡提供NAT访问外网的功能。如果要移除该服务，可以使用 <code>yum remove libvirt-libs.x86_64</code></p><p>启动docker容器后，会产生docker0的虚拟网桥网卡。</p><p>作用：</p><ul><li>容器间的互联和通信以及端口映射</li><li>容器IP变动时候可以通过服务名直接网络通信而不受到影响</li></ul><h3 id="docker网络相关命令" tabindex="-1"><a class="header-anchor" href="#docker网络相关命令"><span>docker网络相关命令：</span></a></h3><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 查看docker网络模式</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> network</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ls</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 查看网络元数据</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> network</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> inspect</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [网络名称]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 添加网络</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> network</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> create</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [网络名称]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 删除网络</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> network</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> rm</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [网络名称]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 删除所有无效网络</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> network</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> prune</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="docker常见网络模式" tabindex="-1"><a class="header-anchor" href="#docker常见网络模式"><span>docker常见网络模式</span></a></h3><table><thead><tr><th style="text-align:center;">网络模式</th><th style="text-align:center;">简介</th><th style="text-align:center;">使用方式</th></tr></thead><tbody><tr><td style="text-align:center;">bridge</td><td style="text-align:center;">为每一个容器分配、设置IP等，并将容器连接到一个<code>docker0</code>虚拟网桥，默认为该模式</td><td style="text-align:center;"><code>--network bridge</code></td></tr><tr><td style="text-align:center;">host</td><td style="text-align:center;">容器将不会虚拟出自己的网卡、配置自己的IP等，而是使用宿主机的IP和端口</td><td style="text-align:center;"><code>--network host</code></td></tr><tr><td style="text-align:center;">none</td><td style="text-align:center;">容器有独立的 Network namespace，但并没有对齐进行任何网络设置，如分配 <code>veth pari</code> 和 网桥连接、IP等</td><td style="text-align:center;"><code>--network none</code></td></tr><tr><td style="text-align:center;">container</td><td style="text-align:center;">新创建的容器不会创建自己的网卡和配置自己的IP，而是和一个指定的容器共享IP、端口范围等</td><td style="text-align:center;"><code>--network container:NAME或者容器ID</code></td></tr></tbody></table><p>容器内默认网络IP生成规则：docker容器内部的ip是有可能会发生改变的。</p><h3 id="bridge模式" tabindex="-1"><a class="header-anchor" href="#bridge模式"><span>bridge模式：</span></a></h3><p>Docker 服务默认会创建一个 docker0 网桥（其上有一个 docker0 内部接口），该桥接网络的名称为docker0，它在内核层连通了其他的物理或虚拟网卡，这就将所有容器和本地主机都放到同一个物理网络。Docker 默认指定了 docker0 接口 的 IP 地址和子网掩码，让主机和容器之间可以通过网桥相互通信。</p><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 查看 bridge 网络的详细信息，并通过 grep 获取名称项</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> network</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> inspect</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> bridge</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> |</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> grep</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> name</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>Docker使用Linux桥接，在宿主机虚拟一个Docker容器网桥(docker0)，Docker启动一个容器时会根据Docker网桥的网段分配给容器一个IP地址，称为Container-IP，同时Docker网桥是每个容器的默认网关。因为在同一宿主机内的容器都接入同一个网桥，这样容器之间就能够通过容器的Container-IP直接通信。</li><li>docker run 的时候，没有指定network的话默认使用的网桥模式就是bridge，使用的就是docker0。在宿主机ifconfig,就可以看到docker0和自己create的network(后面讲)eth0，eth1，eth2……代表网卡一，网卡二，网卡三……，lo代表127.0.0.1，即localhost，inet addr用来表示网卡的IP地址</li><li>网桥docker0创建一对对等虚拟设备接口一个叫veth，另一个叫eth0，成对匹配。 <ul><li>整个宿主机的网桥模式都是docker0，类似一个交换机有一堆接口，每个接口叫veth，在本地主机和容器内分别创建一个虚拟接口，并让他们彼此联通（这样一对接口叫veth pair）;</li><li>每个容器实例内部也有一块网卡，每个接口叫eth0；</li><li>docker0上面的每个veth匹配某个容器实例内部的eth0，两两配对，一一匹配。</li></ul></li></ol><p>通过上述，将宿主机上的所有容器都连接到这个内部网络上，两个容器在同一个网络下,会从这个网关下各自拿到分配的ip，此时两个容器的网络是互通的。</p><p>可启动容器在宿主机和容器内部使用<strong>ip addr</strong>来查看网卡是否一一对应匹配。 <img src="`+t+'" alt="docker-network-01.png"></p><h3 id="host模式" tabindex="-1"><a class="header-anchor" href="#host模式"><span>host模式：</span></a></h3><p>容器将不会获得一个独立的Network Namespace， 而是和宿主机共用一个Network Namespace。容器将不会虚拟出自己的网卡而是使用宿主机的IP和端口。 <img src="'+l+`" alt="docker-network-02.png"></p><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 指定网络模式为host模式</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -d</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -p</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 8083:8080</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --network</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> host</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --name</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> tomcat83</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> billygoo/tomcat8-jdk8</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 会提示下图所示的警告信息</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 原因：docker启动时指定--network=host或-net=host，如果还指定了-p映射端口，那这个时候就会有此警告，因为通过-p设置的参数将不会起到任何作用，端口号会以主机端口号为主，重复时则递增。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 正确用法：</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -d</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --network</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> host</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --name</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> tomcat83</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> billygoo/tomcat8-jdk8</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+d+'" alt="docker-network-03.png"></p><h3 id="none模式" tabindex="-1"><a class="header-anchor" href="#none模式"><span>none模式：</span></a></h3><p>禁用了网络功能，在<code>none</code>模式下，并不为docker容器进行任何网络配置。进入容器内，使用 <code>ip addr</code>查看网卡信息，只能看到 <code>lo</code>（本地回环网络<code>127.0.0.1</code>网卡）。</p><h3 id="container模式" tabindex="-1"><a class="header-anchor" href="#container模式"><span>container模式：</span></a></h3><p>新建的容器和已经存在的一个容器共享一个网络ip配置而不是和宿主机共享。新创建的容器不会创建自己的网卡，配置自己的IP，而是和一个指定的容器共享IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。 <img src="'+h+`" alt="docker-network-04.png"></p><p>示例：</p><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 创建两个容器且alpine2共享alpine1的网络信息</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -it--name</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> alpine1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  alpine</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /bin/sh</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -it</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --network</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> container:alpine1</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --name</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> alpine2</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  alpine</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /bin/sh</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 分别进入各自容器使用ip addr查看网络信息比对是否使用同一网络</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 尝试关闭alpine1容器再次进入alpine2执行ip addr发现网络也随之消失了</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自定义网络模式" tabindex="-1"><a class="header-anchor" href="#自定义网络模式"><span>自定义网络模式：</span></a></h3><p>容器间的互联和通信以及端口映射，同一网桥下的容器间互联通信可通过ip通信，但通过服务名无法进行通信，自定义网络模式使得容器 IP 变动时候可以通过服务名直接网络通信而不受影响。</p><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 自定义网络模式</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> network</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> create</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> tomcat_network</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用默认网络模式：</p><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -d</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -p</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 8081:8080</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --name</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> tomcat81</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> billygoo/tomcat8-jdk8</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -d</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -p</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 8082:8080</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --name</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> tomcat82</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> billygoo/tomcat8-jdk8</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 各自进入容器内部查看IP信息，使用ping命令尝试是否可以ping通网络：可以ping通</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 尝试使用服务名ping对方网络：Name or service not known</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用自定义网络启动容器：</p><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -d</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -p</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 8081:8080</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --network</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> tomcat_network</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --name</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> tomcat81</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> billygoo/tomcat8-jdk8</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -d</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -p</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 8082:8080</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --network</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> tomcat_network</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --name</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> tomcat82</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> billygoo/tomcat8-jdk8</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 各自进入容器使用服务名尝试网络是否连通:ping tomcat81 ping tomcat82</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 结论：自定义网络本身就维护好了主机名和ip的对应关系（ip和域名都能通信）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,36)]))}const o=i(k,[["render",r],["__file","index.html.vue"]]),g=JSON.parse(`{"path":"/devops/docker/network/","title":"Docker容器网络","lang":"zh-CN","frontmatter":{"title":"Docker容器网络","createTime":"2025/03/31 21:29:40","permalink":"/devops/docker/network/","head":[["script",{"id":"check-dark-mode"},";(function () {const um= localStorage.getItem('vuepress-theme-appearance') || 'auto';const sm = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;if (um === 'dark' || (um !== 'light' && sm)) {document.documentElement.classList.add('dark');}})();"],["script",{"id":"check-mac-os"},"document.documentElement.classList.toggle('mac', /Mac|iPhone|iPod|iPad/i.test(navigator.platform))"]]},"headers":[{"level":3,"title":"Docker网络介绍：","slug":"docker网络介绍","link":"#docker网络介绍","children":[]},{"level":3,"title":"docker网络相关命令：","slug":"docker网络相关命令","link":"#docker网络相关命令","children":[]},{"level":3,"title":"docker常见网络模式","slug":"docker常见网络模式","link":"#docker常见网络模式","children":[]},{"level":3,"title":"bridge模式：","slug":"bridge模式","link":"#bridge模式","children":[]},{"level":3,"title":"host模式：","slug":"host模式","link":"#host模式","children":[]},{"level":3,"title":"none模式：","slug":"none模式","link":"#none模式","children":[]},{"level":3,"title":"container模式：","slug":"container模式","link":"#container模式","children":[]},{"level":3,"title":"自定义网络模式：","slug":"自定义网络模式","link":"#自定义网络模式","children":[]}],"readingTime":{"minutes":5.75,"words":1724},"git":{"createdTime":1743517938000,"updatedTime":1743517938000,"contributors":[{"name":"yongjun","email":"1640808365@qq.com","commits":1}]},"filePathRelative":"notes/devops/docker/Docker容器网络.md"}`);export{o as comp,g as data};
